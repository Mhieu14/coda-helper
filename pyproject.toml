[tool.poetry]
name = "fastapi-service-template"
version = "0.1.0"
description = ""
authors = ["Duc-Minh Phan <alephvn@gmail.com>"]
license = "Apache License 2.0"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10"
SQLAlchemy = { version = "^2.0.19", extras = ["asyncio"] }
aiomysql = "^0.1.1"
alembic = "^1.11.1"
fastapi = "^0.100.0"
pydantic = "^2.1.1"
pydantic-settings = "^2.0.2"
python-dotenv = "^1.0.0"
uvicorn = "^0.22.0"

[tool.poetry.group.dev.dependencies]
asgiref = "^3.7.2"
coverage = "^7.2.7"
httpx = "^0.24.1"
pytest = "^7.4.0"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
# Same as Black.
line-length = 88

target-version = "py310"

extend-exclude = ["migrations"]

[tool.ruff.lint]
select = [
    "F", # Pyflakes
    "E", # Pycodestyle
    "W", # Pycodestyle
    "I", # isort
    "ASYNC", # flake8-async
    "S", # flake8-bandit
    "COM", # flake8-commas
    "C4", # flake8-comprehensions
    "ISC", # flake8-implicit-str-concat
    "INP", # flake8-no-pep420
    "T20", # flake8-print
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "C90", # mccabe
    "PERF", # perflint
    "UP", # pyupgrade
    "RUF", # Ruff-specific rules
]

ignore = [
    "S101",
    "S105",
    "S301",
    # need to be fixed for Pydantic models:
    # https://github.com/astral-sh/ruff/issues/5243
    "RUF012",
]

[tool.ruff.lint.isort]
lines-after-imports = 2
split-on-trailing-comma = false
forced-separate = ["tests"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S106", "S311", "ASYNC101"]

[tool.mypy]
ignore_missing_imports = true
strict_optional = true
follow_imports = "silent"
check_untyped_defs = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = "tests.*"
disable_error_code = "var-annotated"

[tool.coverage.run]
source = ["main"]
concurrency = ["greenlet", "thread"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
    "@overload",
]
