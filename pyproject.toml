[tool.poetry]
name = "fastapi-service-template"
version = "0.1.0"
description = ""
authors = ["Duc-Minh Phan <alephvn@gmail.com>"]
license = "Apache License 2.0"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10"
SQLAlchemy = { version = "^2.0.18", extras = ["asyncio"] }
aiomysql = "^0.1.1"
alembic = "^1.11.1"
fastapi = "^0.95.2"
pydantic = "^1.10.11"
python-dotenv = "^1.0.0"
uvicorn = "^0.22.0"

[tool.poetry.group.dev.dependencies]
coverage = "^7.2.7"
httpx = "^0.24.1"
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
asgiref = "^3.7.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
select = [
    # Pyflakes
    "F",
    # Pycodestyle
    "E",
    "W",
    # isort
    "I",
    # flake8-print
    "T20",
    # pyupgrade
    "UP",
    # Ruff-specific rules
    "RUF",
]

extend-exclude = ["migrations"]

# Same as Black.
line-length = 88

target-version = "py310"

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
ignore_missing_imports = true
strict_optional = true
follow_imports = "silent"
check_untyped_defs = true

[tool.bandit]
skips = ["B101", "B105", "B107", "B301", "B403"]

[tool.coverage.run]
source = ["main"]
concurrency = ["greenlet"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
    "@overload",
]
